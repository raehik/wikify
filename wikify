#!/usr/bin/env bash
#
# Preprocess & render all files with a certain extension in a directory,
# subject to lots (& lots!) of variables.
#
# The main aim here is *flexibility*. You can change which Markdown
# parser is used, how a page title is found, and way too much more.
#

## Configuration {{{
#
# Stop immediately if anything goes wrong.
# Decided because we automatically delete a directory specified by a
# variable (not an argument) without asking the user, plus this script
# is still in-progress.
set -e

### Low-level configuration {{{
##
## (you probably won't want to change these)
#
#preprocessor="mdwiki-preprocess"
#markdown_parser="redcarpet --smarty --parse-footnotes --parse-no-intra-emphasis --parse-strikethrough"
markdown_parser="redcarpet-shortlink.rb"
page_renderer="markdown-render"
title_method="head -n1"
from_ext="md"
to_ext=""
### }}}

### General configuration {{{
#
# Directory to use.
wiki_dir="$HOME/wiki"

# Directory to output to. PLEASE NOTE: this will be emptied every time
# wikify runs!
out_dir="$HOME/.wiki_html"

# Directory to move files from (relative to $wiki_dir) to the $out_dir
# root.
# Means you can hide HTML-related files out of the way of your writing.
special_dir=".html_biz"

# Style file to apply to all pages.
css_file="static/style.css"

# Favicon to apply to all pages.
favicon="favicon.png"

# Index file: linked back to on each page except for itself
index_file="index"

# Markdown header to apply to all pages (except for index).
header="[← back to index]($index_file)"

# Markdown footer to apply to all pages.
#footer="[↑ top](#)"
### }}}
## }}}

## 'Links' page configuration {{{
#
# Page to create to throw links on.
# If a page with the same name exists (e.g. links.md), it'll be
# overwritten.
links_file="links"

# Anything you want to put at the top of the links page, after the
# normal header.
#links_header="$header"$'\n'"$($markdown_parser <<< "Links"$'\n'"=====")"
links_header="Links"$'\n'"====="

# Page <title>.
links_title="Links"
## }}}

if [ -n "$1" ]; then
    # if we get an argument, open that page on finish
    open_file="${1%.*}$to_ext"
else
    # else open the index file"
    open_file="${index_file%.*}$to_ext"
fi

# copy all to working directory (= output directory)
rm -rf "$out_dir"
cp -R "$wiki_dir" "$out_dir"
mv "$out_dir/$special_dir"/* "$out_dir"

# clean up directory
rmdir "$out_dir/$special_dir"
rm -rf "$out_dir/.git"

# form HTML pages for each Markdown (.md) file found
for file in "$out_dir"/*.$from_ext
do
    # get file info
    content="$(< "$file")"
    title="$($title_method "$file")"
    outfile="$out_dir/$(basename "$file" ".$from_ext")$to_ext"

    # if index page, no header plz
    if [ "$(basename "$file")" == "${index_file%.*}.$from_ext" ]; then
        body="$content"
    else
        body="$header"$'\n'"$content"
    fi

    # form HTML
    $page_renderer -t "$title" -f "$favicon" -c "$css_file" <<< "$body" > "$outfile"

    # append to links page Markdown
    links_pages="$links_pages"$'\n'"* [$title]($(basename "$outfile"))"

    # delete processed Markdown file
    rm "$file"

    # ignore caps on first letter by making a symlink
    filename="$(basename "$file" ".$from_ext")$to_ext"
    ln -vs "$outfile" "$out_dir/${filename,}" &> "/dev/null" || true
done

# generate links page
links_body="$header"$'\n\n'"$links_header"$'\n\n'"$links_pages"
$page_renderer -t "$links_title" -f "$favicon" -c "$css_file" <<< "$links_body" > "$out_dir/$links_file"

# open up the wiki!
firefox "$out_dir/$open_file"
